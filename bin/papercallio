#!/usr/bin/env ruby
require 'gli'
require 'papercallio'
require 'csv'
require 'yaml'
require 'descriptive_statistics'

include GLI::App

class Float
  def signif(digits)
    return 0 if self.zero?
    self.round(-(Math.log10(self).ceil - digits))
  end
end

program_desc %(Command line interface for the papercall.io API
             papercallio requires API access to download data.
             API access is a paid feature, papercallio will not work with the free papercall plan.
             To obtain your API token, go to the papercall website, click the events tab, choose your event,
             then choose the Organisers link on the right hand side. On the list of organisers for your event your API
             token will be listed under your name.

             Once you have your API key export it in your shell

                 export PAPERCALL_API_TOKEN=abcdefghijklmnopqrstuvwxyz1234567890)

version Papercallio::VERSION

api_token = ENV['PAPERCALL_API_TOKEN']

subcommand_option_handling :normal
arguments :strict

desc 'The file path for output'
default_value 'submissions.csv'
arg_name 'The file path (e.g. ./submissions.csv)'
flag [:f, :file]

desc %(Return submissions in csv file.
       Add your token as an environment variable for the API.

               export PAPERCALL_API_TOKEN=abcdefghijklmnopqrstuvwxyz1234567890)
arg_name 'Arguments to manipulate the submissions returned'
command :submissions do |c|
  c.switch 'needs_rating', :desc => 'Filter results needs rating. Default (false).'
  c.switch 'include_feedback', :desc => 'Include the feedback for all submissions in the csv (Not currently implemented).'
  c.switch 'include_ratings', :desc => 'Include the ratings for all submissions in the csv'
  c.switch 'devopsdays_output', :desc => 'Output the markdown for accepted speakers and submissions for the DevOpsDays website. Default (false). NOTE: may need to use --state=accepted if no longer in submitted state.'

  c.flag 'state', :default_value => nil,
                  :arg_name => 'state of submissions. ',
                  :desc => 'Filter results by their state. Possible values are: submitted, accepted, rejected, and waitlist. If not provided then all will be returned. Can only filter to one state.'
  c.flag 'keywords', :default_value => nil,
                     :arg_name => 'keywords',
                     :desc => 'Filter results keywords.'
  c.flag 'order', :default_value => nil,
                  :arg_name => 'order',
                  :desc => 'Sort results. Possible values are: state, rating, ratings_count, title, created_at, talk_format_id, audience_level, confidence'
  c.flag 'filter', :default_value => [],
                   :arg_name => 'filter',
                   :desc => "Filter results based on comments by reviewers. Can use multiple, ex. --filter='top_talk' --filter='top_ignite' --filter='open_space' NOTE: will only work when --include_ratings is used and even then when the user's role has the 'see ratings' privilege in papercall." ,
                   :multiple => true

  c.action do |global_options,options,args|
    pcc = PaperCallClient.new(api_token, options)
    response = pcc.submissions
    %w(speakers program images).each{|dir| FileUtils.mkdir_p( "./#{dir}")} if options[:devopsdays_output]

    submissions = []
    headers = []
    headerset = false
    reviewers = {}
    response.each do |submission|
      line = {}
      include_line = false
      id = nil
      submission.each do |field, value|
        if value.is_a?(Hash)
          value.each do |subfield, subvalue|
            line["#{field}_#{subfield}"] = subvalue
            headers << "#{field}_#{subfield}" unless headerset
          end
          next
        end
        line[field] = value
        id = value if field.eql? 'id'
        headers << field unless headerset
      end

      if options[:include_feedback]
        #puts "OK!"
        #submission_feedback = pcc.feedback(id)
        #puts submission_feedback
      end
      if options[:include_ratings]
        submission_ratings = pcc.rating(id)
        total_ratings = 0
        individual_ratings = ''
        raters = ''
        comments = ''
        headers.concat([:total_ratings, :individual_ratings, :raters, :comments]) unless headerset
        submission_ratings.each do |rate|
          user = ''
          rating = 0
          comment = ''
          rate.each do |rate_field, rate_value|
            # individual
            user = rate_value['name'].to_s if rate_field == 'user'
            rating = rate_value if rate_field == 'value'
            comment = rate_value if rate_field == 'comments'
            # cumulative
            total_ratings += rate_value if rate_field == 'value'
            individual_ratings << "#{rate_value}, " if rate_field == 'value'
            raters << "#{rate_value['name']}, " if rate_field == 'user'
            comments << "#{rate_value}, " if rate_field == 'comments'
          end
          reviewers[user] = [] unless headers.include?("#{user}-rating")
          reviewers[user].push(rating)
          headers.push("#{user}-rating") unless headers.include?("#{user}-rating")
          headers.push("#{user}-comment") unless headers.include?("#{user}-comment")
          line["#{user}-rating"] = rating
          line["#{user}-comment"] = comment
        end
        line[:total_ratings] = total_ratings
        line[:individual_ratings] = individual_ratings
        line[:raters] = raters
        line[:comments] = comments
        if options[:filter].empty?
          include_line = true
        elsif options[:filter].any? { |word| comments.include?(word) }
          include_line = true
        end
      else
        include_line = true
      end
      headerset = true
      submissions << line if include_line
      if options[:devopsdays_output]
        dodo = DevOpsDaysOutput.new(line) #if line[:state] == 'accepted'
        #dodo.download_twitter_image
      end
      line = {}
    end
    File.open(global_options[:file], 'w') do |f|
      f.puts headers.to_csv
      submissions.each do |sub|
        f.puts headers.map { |h| sub[h] }.to_csv
      end
    end
    if options[:include_ratings]
      puts 'Summary of reviewers:'
      puts "Name: \t\t ratings \t mean \t median \t mode \t stdev \t range \t high \t low"
      reviewers.each do |name, rating_array|
        puts "#{name}: \t #{rating_array.size} \t\t #{rating_array.mean.signif(4)} \t #{rating_array.median} \t\t #{rating_array.mode} \t #{rating_array.standard_deviation.signif(4)} \t #{rating_array.range} \t #{rating_array.percentile(100)} \t #{rating_array.percentile(0)}"
      end
    end
    puts "submissions have been output to #{global_options[:file]}"
  end
end

desc 'Return event as yaml'
arg_name 'No arguments'
command :event do |c|
  c.action do |global_options,options,args|
    pcc = PaperCallClient.new(api_token, {})
    response = pcc.event
    puts response.parsed_response.to_yaml
  end
end

desc 'Return a single submission as yaml'
arg_name "Arguments: 'id' identifier of the submission"
command :submission do |c|
  c.flag 'id', :default_value => 1,
               :arg_name => 'papercall submission identifier',
               :desc => 'identifier of the submission'
  c.action do |global_options,options,args|
    pcc = PaperCallClient.new(api_token, {})
    response = pcc.submission(options[:id])
    puts response.parsed_response.to_yaml
  end
end

desc 'Return ratings for a single submission as yaml'
arg_name "Arguments: 'id' identifier of the submission"
command :rating do |c|
  c.flag 'id', :default_value => 1,
               :arg_name => 'papercall submission identifier',
               :desc => 'identifier of the submission'
  c.action do |global_options,options,args|
    pcc = PaperCallClient.new(api_token, {})
    response = pcc.rating(options[:id])
    puts response.parsed_response.to_yaml
  end
end

desc 'Return feedback for a single submission as yaml'
arg_name "Arguments: 'id' identifier of the submission"
command :feedback do |c|
  c.flag 'id', :default_value => 1,
               :arg_name => 'papercall submission identifier',
               :desc => 'identifier of the submission'
  c.action do |global_options,options,args|
    pcc = PaperCallClient.new(api_token, {})
    response = pcc.feedback(options[:id])
    puts response.parsed_response.to_yaml
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
